// Statement
// Each new term in the Fibonacci sequence is generated by adding the 
// previous two terms. By starting with 1 and 2, the first 10 terms 
// will be:
// 
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// 
// By considering the terms in the Fibonacci sequence whose values 
// do not exceed four million, find the sum of the even-valued terms.
// --------------------------------------------------------------------
package Problems1_10;

import java.util.ArrayList;

public class Problem2 {
	// Function to compute the nth Fibonacci number
	public static ArrayList<Integer> Fibonacci(int n) {
		// This ArrayList will contain the fibo number up to n
		ArrayList<Integer> fibo = new ArrayList<Integer>();
		if(n == 1) {
			fibo.add(1);
		} else {
			fibo.add(1);
			fibo.add(1);
			for (int i = 2; i < n; i++) {
				fibo.add( fibo.get(i - 1) + fibo.get(i - 2));
			}
		}		
		return fibo;
	}

	public static void main(String[] args) {
		// Print the fibonacci sequence up to n
		int n = 15;
		ArrayList<Integer> sequence = Fibonacci(n);
		System.out.println(sequence);
		
		// While loop and storing even-valued term
		n = 1;
		int last_number = sequence.get(sequence.size() - 1);
		ArrayList<Integer> even_valued = new ArrayList<Integer>();
		
		while (last_number < 4000000) {
			// Increase size of sequence by 1
			n++;
			
			// Store new last number
			sequence = Fibonacci(n);
			last_number = sequence.get(sequence.size() - 1);
			
			// If last_number is even, store it
			if (last_number % 2 == 0) {
				even_valued.add(last_number);
			}
		}
		// Take the sum - 1 
		int sum = 0; 
		for(int x: even_valued) {
			sum = sum + x;
		}
		// Result
		System.out.println("The sum of the even-valued terms is: " + (sum - 1));
	}

}
