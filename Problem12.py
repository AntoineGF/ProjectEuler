# Project Euler: Problem 12

# --------------------
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
# --------------------

import numpy as np

# Find the nth triangle number
def triangle_numbers(n):
    return sum(list(range(0,n+1)))

# Find the factors
def find_factors(x):
    factors = set()
    # Loop over 1 to sqrt(x)
    for div in range(1, int(np.ceil(np.sqrt(x)))):
        # If no remainder, then it's a factor
        if x % div == 0:
            factors.update((div, x//div))

    return factors

# Loop
factors = set()
i = 1
while len(factors) < 500:
    # Find ith triangle number
    triangle = triangle_numbers(i)
    # Find the factors
    factors = find_factors(triangle)
    i += 1

# Results
print('The ' + str(i-1) + 'th iteration has over 500 hundred divisors')
print('The value of the triangle number is: ' + str(triangle))
